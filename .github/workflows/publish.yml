name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to TestPyPI (allowed from any branch) instead of PyPI (main branch only)'
        required: false
        default: false
        type: boolean

# Branch protection: Only production PyPI requires main branch
# TestPyPI publishing allowed from any branch
env:
  PUBLISH_BRANCH: main

jobs:
  # Branch validation: Enforce main for PyPI, allow any branch for TestPyPI
  check-branch:
    name: Check Branch Protection
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify branch requirements
      run: |
        CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
        IS_TEST_PYPI="${{ github.event.inputs.test_pypi || 'false' }}"
        IS_RELEASE="${{ github.event_name == 'release' }}"
        
        echo "Current branch: $CURRENT_BRANCH"
        echo "Required branch for PyPI: ${{ env.PUBLISH_BRANCH }}"
        echo "Publishing to TestPyPI: $IS_TEST_PYPI"
        echo "Release event: $IS_RELEASE"
        
        # Allow TestPyPI publishing from any branch
        if [ "$IS_TEST_PYPI" = "true" ]; then
          echo "✅ TestPyPI publishing allowed from any branch ($CURRENT_BRANCH)"
          echo "✅ Branch check passed - proceeding with TestPyPI publish"
          exit 0
        fi
        
        # For production PyPI, require main branch
        if [ "$CURRENT_BRANCH" != "${{ env.PUBLISH_BRANCH }}" ]; then
          echo "❌ ERROR: Production PyPI publishing is only allowed from the '${{ env.PUBLISH_BRANCH }}' branch"
          echo "Current branch is: $CURRENT_BRANCH"
          echo ""
          echo "Options:"
          echo "1. Switch to main branch for production PyPI publishing"
          echo "2. Use 'test_pypi: true' to publish to TestPyPI from this branch"
          echo "3. Create a release from the main branch"
          exit 1
        fi
        
        echo "✅ Production PyPI branch check passed - proceeding with PyPI publish"

  # Ensure CI passes before allowing publish
  check-ci:
    name: Check CI Status
    runs-on: ubuntu-latest
    needs: check-branch
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Check CI workflow status
      uses: actions/github-script@v7
      with:
        script: |
          const { data: workflows } = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'ci.yml',
            head_sha: context.sha,
            per_page: 1
          });
          
          if (workflows.workflow_runs.length === 0) {
            core.setFailed('No CI workflow run found for this commit');
            return;
          }
          
          const ciRun = workflows.workflow_runs[0];
          if (ciRun.conclusion !== 'success') {
            core.setFailed(`CI workflow ${ciRun.conclusion} - cannot publish`);
            return;
          }
          
          console.log('CI workflow passed - proceeding with publish');

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: check-ci
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"
    
    - name: Build package
      run: |
        uv pip install --system build
        python -m build
    
    - name: Store distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish to PyPI
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && !inputs.test_pypi)
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/TcpSocketMCP
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-testpypi:
    name: Publish to TestPyPI
    if: github.event_name == 'workflow_dispatch' && inputs.test_pypi
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/TcpSocketMCP
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  github-release:
    name: Sign and upload to GitHub Release
    needs: publish-to-pypi
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh release upload '${{ github.ref_name }}' dist/** --repo '${{ github.repository }}'